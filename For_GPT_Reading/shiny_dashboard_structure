# shiny_dashboard_structure.md

---

## 目录结构及主文件

- `app.R`           : 启动主入口，加载全部模块及UI/Server定义。
- `shinyapp/`
    - `mod_overview.R`      : 数据总览模块
    - `mod_table.R`         : 原始数据表模块
    - `mod_search.R`        : 关键词检索模块
    - `mod_autoupdate.R`    : 数据更新日志模块
    - `app_ui.R`            : 全局UI定义
    - `app_server.R`        : 全局Server定义

---

## 1. app.R

````r
# Main launcher -----------------------------------------------------------
# Run with:  shiny::runApp(".")
suppressPackageStartupMessages({
  library(shiny)
  library(shinydashboard)
  library(shinydashboardPlus)
  library(reactable)
  library(plotly)
  library(tidyverse)
  library(leaflet)
  library(rnaturalearth)
  library(rnaturalearthdata)
  library(sf)
})

options(jsonlite.simplifyVector = TRUE)

# Source internal files ---------------------------------------------------
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)

# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
````

---

## 2. mod_overview.R（总览模块）

### UI部分

````r
mod_overview_ui <- function(id) {
  ns <- NS(id)
  tagList(
    fluidRow(
      column(12, div(style = "text-align:right; font-size:12px;", textOutput(ns("last_update"))))
    ),
    fluidRow(
      valueBoxOutput(ns("v_lit"),       width = 4), 
      valueBoxOutput(ns("v_diseases"),  width = 4), 
      valueBoxOutput(ns("v_countries"), width = 4)  
    ),
    fluidRow(
      box(width = 6, title = "Publications by Year", plotly::plotlyOutput(ns("year_trend"))),
      box(width = 6, title = "Country & Region Distribution", leaflet::leafletOutput(ns("map_leaf"), height = 400))
    ),
    fluidRow(
      box(width = 6, title = "Top Diseases Distribution", plotly::plotlyOutput(ns("dis_bar"))),
      box(width = 6, title = "Top Epidemiological Index Distribution", plotly::plotlyOutput(ns("idx_bar")))
    )
  )
}
````

### Server部分

````r
mod_overview_server <- function(id, data) {
  moduleServer(id, function(input, output, session) {
    get_country <- function(region) {
      region <- trimws(region)
      r_upper <- toupper(region)
      region[grepl("CHINA|CN|HONGKONG|HK|MACAO|MACAU", r_upper)] <- "China"
      region[grepl("USA|US$|UNITED STATES|AMERICA", r_upper)] <- "United States of America"
      region[grepl("UNITED KINGDOM|ENGLAND|SCOTLAND|WALES|NORTHERN IRELAND|GB|UK", r_upper)] <- "United Kingdom"
      region
    }
    get_country_lit_counts <- function(df) {
      df$country_std <- get_country(df$country_region)
      dplyr::distinct(df, pmid, country_std) |>
        dplyr::count(country_std, name = "unique_lit")
    }
    world_countries <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf")$name
    output$last_update <- renderText({
      paste("Data Last Updated:", format(Sys.time(), "%Y-%m-%d %H:%M"))
    })
    output$v_lit <- shinydashboard::renderValueBox({
      shinydashboard::valueBox(
        dplyr::n_distinct(data()$pmid), "Literature", icon = icon("book")
      )
    })
    output$v_diseases <- shinydashboard::renderValueBox({
      shinydashboard::valueBox(
        dplyr::n_distinct(data()$disease_name), "Diseases", icon = icon("notes-medical")
      )
    })
    output$v_countries <- shinydashboard::renderValueBox({
      country_lit <- get_country_lit_counts(data())
      n_countries <- sum(country_lit$country_std %in% world_countries & country_lit$unique_lit > 0)
      shinydashboard::valueBox(
        n_countries, "Countries", icon = icon("globe")
      )
    })
    output$year_trend <- plotly::renderPlotly({
      d <- dplyr::distinct(data(), pmid, data_source_year)
      d <- d |>
        dplyr::filter(!is.na(data_source_year)) |>
        dplyr::mutate(year = as.integer(as.character(data_source_year))) |>
        dplyr::filter(year >= 1900, year <= 2100)
      trend <- d |> dplyr::count(year)
      p <- ggplot2::ggplot(trend, ggplot2::aes(year, n)) +
        ggplot2::geom_line() + ggplot2::geom_point() +
        ggplot2::scale_x_continuous(breaks = scales::pretty_breaks(n = 12)) +
        ggplot2::labs(x = "Year", y = "Literature")
      plotly::ggplotly(p)
    })
    output$map_leaf <- leaflet::renderLeaflet({
      country_lit <- get_country_lit_counts(data())
      world  <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf")
      world <- dplyr::left_join(world, country_lit, by = c("name" = "country_std"))
      world$unique_lit[is.na(world$unique_lit)] <- 0
      bins <- c(0, 5, 20, 50, 100, 200, 500, 1000, 2000)
      pal <- leaflet::colorBin("YlOrRd", domain = world$unique_lit, bins = bins, pretty = FALSE)
      bb  <- sf::st_bbox(world)
      leaflet::leaflet(world, options = leaflet::leafletOptions(worldCopyJump = FALSE, minZoom = 1)) |>
        leaflet::addProviderTiles("CartoDB.Positron", options = leaflet::providerTileOptions(noWrap = TRUE)) |>
        leaflet::setMaxBounds(lng1 = bb$xmin, lat1 = bb$ymin, lng2 = bb$xmax, lat2 = bb$ymax) |>
        leaflet::addPolygons(
          fillColor   = ~pal(unique_lit),
          fillOpacity = 0.8,
          weight      = 0.3,
          color       = "white",
          label       = ~paste(name, "-", unique_lit, "literature"),
          highlight   = leaflet::highlightOptions(weight = 1, color = "black", bringToFront = TRUE)
        ) |>
        leaflet::addLegend(pal = pal, values = ~unique_lit, title = "Literature", opacity = 0.7)
    })
    output$dis_bar <- plotly::renderPlotly({
      d <- dplyr::distinct(data(), pmid, disease_name)
      topn <- d |> dplyr::count(disease_name, sort = TRUE) |> head(10)
      p <- ggplot2::ggplot(topn, ggplot2::aes(
        x = reorder(disease_name, n),
        y = n,
        text = paste0("n = ", n)
      )) +
        ggplot2::geom_col(fill = "steelblue") +
        ggplot2::coord_flip() +
        ggplot2::labs(x = "Disease", y = "Literature")
      plotly::ggplotly(p, tooltip = "text")
    })
    output$idx_bar <- plotly::renderPlotly({
      d <- dplyr::distinct(data(), pmid, epid_index)
      idx <- d |> dplyr::count(epid_index, sort = TRUE)
      topn <- head(idx, 15)
      p <- ggplot2::ggplot(topn, ggplot2::aes(
        x = reorder(epid_index, n),
        y = n,
        text = paste0("n = ", n)
      )) +
        ggplot2::geom_col(fill = "darkorange") +
        ggplot2::coord_flip() +
        ggplot2::labs(x = "Index", y = "Literature")
      plotly::ggplotly(p, tooltip = "text")
    })
  })
}
````

---

## 3. mod_table.R（原始数据表模块）

### UI部分

````r
mod_table_ui <- function(id) {
  ns <- NS(id)
  reactable::reactableOutput(ns("lit_tbl"))
}
````

### Server部分

````r
mod_table_server <- function(id, data) {
  moduleServer(id, function(input, output, session) {
    output$lit_tbl <- reactable::renderReactable({
      reactable::reactable(
        data()[, c(
          "pmid","publisher", "disease_name", "biomarker", "baseline", "pathology",
          "stage","survey_start_dt", "survey_end_dt",
          "data_source_year","epid_index", "country_region" 
        )],
        searchable       = TRUE,
        filterable       = TRUE,
        pagination       = TRUE,
        defaultPageSize  = 20,
        striped          = TRUE,
        outlined         = TRUE,
        highlight        = TRUE,
        compact          = TRUE
      )
    })
  })
}
````

---

## 4. mod_search.R（关键词检索模块）

### UI部分

````r
mod_search_ui <- function(id) {
  ns <- NS(id)
  sidebarLayout(
    sidebarPanel(width = 3, 
                 textInput(ns("kw"), "Keyword", placeholder = "Type to search…"),
                 selectInput(ns("field"), "Search Field",
                             choices = c("Disease" = "disease_name",
                                         "Biomarker" = "biomarker",
                                         "Pathology" = "pathology",
                                         "Baseline" = "baseline",
                                         "Stage" = "stage"),
                             selected = "disease_name"),
                 checkboxInput(ns("and_mode"), "Use AND between words", value = TRUE),
                 hr(),
                 tags$div(style = "margin-top: 20px;"),
                 valueBoxOutput(ns("v_found"), width = 12)
    ),
    mainPanel(width = 9,
              tabsetPanel(id = ns("tabs"),
                          tabPanel("List", reactable::reactableOutput(ns("kw_tbl")))
              )
    )
  )
}
````

### Server部分

````r
mod_search_server <- function(id, data) {
  moduleServer(id, function(input, output, session) {
    token_filter <- function(df, column, keyword, and_mode = TRUE) {
      if (is.null(keyword) || keyword == "") return(df[0, ])
      tokens <- unlist(strsplit(keyword, "\s+"))
      pattern_vec <- paste0("(?i)", tokens)
      hits <- sapply(pattern_vec, function(pt) grepl(pt, df[[column]], ignore.case = TRUE))
      keep <- if (and_mode) apply(hits, 1, all) else apply(hits, 1, any)
      df[keep, ]
    }
    filt <- reactive({
      req(input$kw)
      token_filter(data(), input$field, trimws(input$kw), input$and_mode)
    })
    output$v_found <- shinydashboard::renderValueBox({
      shinydashboard::valueBox(nrow(filt()), "Records Found", icon = icon("search"))
    })
    output$kw_tbl <- reactable::renderReactable({
      req(nrow(filt()) > 0)
      cols <- c("biomarker", "baseline", "pathology", "stage", "country_region")
      search_field <- input$field
      search_term <- trimws(input$kw)
      lst <- lapply(cols, function(cl) {
        vals <- unique(filt()[[cl]])
        vals <- vals[!is.na(vals) & nzchar(as.character(vals))]
        if (cl == search_field) {
          to_remove <- unlist(strsplit(search_term, ";|,|\s+"))
          vals <- vals[!vals %in% to_remove]
        }
        vals <- sort(as.character(vals))
        paste(vals, collapse = ";; ")
      })
      s_start <- suppressWarnings(as.numeric(filt()$survey_start_dt))
      s_end   <- suppressWarnings(as.numeric(filt()$survey_end_dt))
      survey_range <- if (all(is.na(s_start)) & all(is.na(s_end))) {
        ""
      } else {
        paste0(
          min(s_start, s_end, na.rm = TRUE), " - ",
          max(s_start, s_end, na.rm = TRUE)
        )
      }
      summary_tbl <- data.frame(
        Field = c("Biomarker", "Baseline", "Pathology", "Stage", "Country/Region", "Survey Range"),
        Unique_Values = c(unlist(lst), survey_range),
        stringsAsFactors = FALSE
      )
      reactable::reactable(
        summary_tbl,
        columns = list(
          Field = reactable::colDef(name = "Field", width = 200),
          Unique_Values = reactable::colDef(name = "Unique Values", html = TRUE, width = 1000, style = list(whiteSpace = "pre-wrap"))
        ),
        sortable = FALSE,
        filterable = FALSE,
        pagination = FALSE,
        compact = TRUE,
        minRows = 1
      )
    })
  })
}
````

---

## 5. mod_autoupdate.R（自动更新日志）

### UI部分

````r
mod_autoupdate_ui <- function(id) {
  ns <- NS(id)
  tagList(
    reactable::reactableOutput(ns("log_tbl"))
  )
}
````

### Server部分

````r
mod_autoupdate_server <- function(id, data, snapshot_path = "shinyapp/last_data_snapshot.rds") {
  moduleServer(id, function(input, output, session) {
    china_tz <- "Asia/Shanghai"
    observe({
      current <- data()
      prev <- if (file.exists(snapshot_path)) readRDS(snapshot_path) else NULL
      new_total <- nrow(current)
      new_lit   <- dplyr::n_distinct(current$pmid)
      prev_total <- if (!is.null(prev)) nrow(prev) else NA_integer_
      prev_lit   <- if (!is.null(prev)) dplyr::n_distinct(prev$pmid) else NA_integer_
      delta_rows <- if (!is.na(prev_total)) new_total - prev_total else NA
      delta_lit  <- if (!is.na(prev_lit))   new_lit   - prev_lit   else NA
      saveRDS(current, snapshot_path)
      log_df <- data.frame(
        time        = lubridate::with_tz(Sys.time(), china_tz),
        new_rows    = delta_rows,
        new_lit     = delta_lit,
        total_rows  = new_total,
        total_lit   = new_lit
      )
      output$log_tbl <- reactable::renderReactable({
        reactable::reactable(
          log_df,
          columns = list(
            time      = reactable::colDef("更新时间", cell = function(x) htmltools::pre(format(x, "%Y/%m/%d
%H:%M"))),
            new_rows  = reactable::colDef("新数据量", align = "right"),
            new_lit   = reactable::colDef("新增文献", align = "right"),
            total_rows= reactable::colDef("总数据量", align = "right"),
            total_lit = reactable::colDef("总文献量", align = "right")
          ),
          compact = TRUE
        )
      })
    })
  })
}
````

---

## 6. app_ui.R

````r
app_ui<-function(request){
  shinydashboardPlus::dashboardPage(
    dashboardHeader(title="流病数据增量管理平台"),
    dashboardSidebar(sidebarMenu(
      menuItem("数据总览",tabName="overview",icon=icon("dashboard")),
      menuItem("关键词检索",tabName="search",icon=icon("search")),
      menuItem("原始数据",tabName="table",icon=icon("table")),
      menuItem("更新记录",tabName="update",icon=icon("sync"))
    )),
    dashboardBody(tabItems(
      tabItem(tabName="overview",mod_overview_ui("overview")),
      tabItem(tabName="search", mod_search_ui("search")),
      tabItem(tabName="table",  mod_table_ui("table")),
      tabItem(tabName="update", mod_autoupdate_ui("update"))
    )),
    title="流病数据增量管理平台"
  ) 
}
````

---

## 7. app_server.R

````r
app_server<-function(input,output,session){
  data <- reactiveVal(data_latest)
  mod_overview_server("overview",data)
  mod_search_server  ("search",  data)
  mod_table_server   ("table",   data)
  mod_autoupdate_server("update", data = data, snapshot_path = "shinyapp/last_data_snapshot.rds")
}
````

---
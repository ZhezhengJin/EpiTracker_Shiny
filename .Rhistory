source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
if (!dir.exists("data")) dir.create("data")
save(data_latest, data_latest_time, file = "data/data_latest.RData")
load("data/data_latest.RData")
app_server<-function(input,output,session){
data <- reactiveVal(data_latest)
data_time <- reactiveVal(data_latest_time)
mod_overview_server("overview",data)
mod_table_server   ("table",   data)
mod_search_server  ("search",  data)
mod_autoupdate_server("update", data = data, data_time = data_time,
db_path = "shinyapp/autoupdate_log.sqlite")
mod_log_server("log")
mod_message_board_server("message_board", db_path = "shinyapp/autoupdate_log.sqlite")
}
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(
DBI,
RSQLite
)
ensure_message_board_table <- function(db_path, table = "message_board") {
con <- DBI::dbConnect(RSQLite::SQLite(), db_path)
if (!DBI::dbExistsTable(con, table)) {
DBI::dbExecute(con, sprintf(
"CREATE TABLE %s (
time TEXT,
user TEXT,
message TEXT,
note TEXT
)", table
))
}
DBI::dbDisconnect(con)
}
# shinyapp/mod_message_board.R
mod_message_board_ui <- function(id) {
ns <- NS(id)
tagList(
fluidRow(
column(3, textInput(ns("user"), "留言人")),
column(6, textInput(ns("message"), "留言内容")),
column(3, actionButton(ns("submit"), "提交留言", icon = icon("paper-plane")))
),
br(),
reactable::reactableOutput(ns("message_board_tbl"))
)
}
mod_message_board_server <- function(id, db_path = "shinyapp/autoupdate_log.sqlite", table = "message_board") {
moduleServer(id, function(input, output, session) {
ensure_message_board_table(db_path, table)
observeEvent(input$submit, {
req(input$user, input$message)
con <- DBI::dbConnect(RSQLite::SQLite(), db_path)
new_row <- data.frame(
time = format(Sys.time(), "%Y-%m-%d %H:%M"),
user = input$user,
message = input$message,
note = "",
stringsAsFactors = FALSE
)
DBI::dbWriteTable(con, table, new_row, append = TRUE, row.names = FALSE)
DBI::dbDisconnect(con)
# 可选：清空输入
updateTextInput(session, "user", value = "")
updateTextInput(session, "message", value = "")
})
output$message_board_tbl <- reactable::renderReactable({
con <- DBI::dbConnect(RSQLite::SQLite(), db_path)
board <- DBI::dbReadTable(con, table)
DBI::dbDisconnect(con)
reactable::reactable(
board,
columns = list(
time = colDef(name = "时间"),
user = colDef(name = "留言人"),
message = colDef(name = "内容"),
note = colDef(name = "备注", show = FALSE)
),
bordered = TRUE,
striped = TRUE,
highlight = TRUE
)
})
})
}
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
mod_log_ui <- function(id) {
ns <- NS(id)
tabItem(
tabName = "log",
h2("App 版本记录"),
reactable::reactableOutput(ns("version_log"))
)
}
mod_log_server <- function(id) {
moduleServer(id, function(input, output, session) {
version_log_df <- data.frame(
version = c("流病数据增量动态看板 v1.0","流病数据增量动态看板 v1.1"),
date = c("2025/07/17","2025/07/18"),
notes = c("初始化版本","改进版本：1.数据总览板块新增总数据量展示 2. 新增版本日志与留言板板块 3.优化数据更新记录的算法"),
maintainer = c("Adam", "Adam"),
stringsAsFactors = FALSE
)
output$version_log <- reactable::renderReactable({
reactable::reactable(
version_log_df,
columns = list(
version = colDef(name = "版本号"),
date = colDef(name = "发布日期"),
notes = colDef(name = "更新内容"),
maintainer = colDef(name = "维护人")
),
bordered = TRUE,
striped = TRUE,
highlight = TRUE
)
})
})
}
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
mod_log_ui <- function(id) {
ns <- NS(id)
tabItem(
tabName = "log",
h2("App 版本记录"),
reactable::reactableOutput(ns("version_log"))
)
}
mod_log_server <- function(id) {
moduleServer(id, function(input, output, session) {
version_log_df <- data.frame(
version = c("流病数据增量动态看板 v1.0","流病数据增量动态看板 v1.1"),
date = c("2025/07/17","2025/07/18"),
notes = c("初始化版本","改进版本：1.数据总览板块新增总数据量展示 2. 新增版本日志与留言板板块 3.优化数据更新记录板块的算法"),
maintainer = c("Adam", "Adam"),
stringsAsFactors = FALSE
)
output$version_log <- reactable::renderReactable({
reactable::reactable(
version_log_df,
columns = list(
version = colDef(name = "版本号"),
date = colDef(name = "发布日期"),
notes = colDef(name = "更新内容"),
maintainer = colDef(name = "维护人")
),
bordered = TRUE,
striped = TRUE,
highlight = TRUE
)
})
})
}
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
file.exists("data/data_latest.parquet")
write_parquet(data_latest,'data/data_latest.parquet')
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
View(data_latest)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_log.R",   local = TRUE)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(shiny,shinydashboard,shinydashboardPlus,
reactable,plotly,tidyverse,leaflet,
rnaturalearth,rnaturalearthdata,sf,
jsonlite,DBI,RSQLite,yaml)
options(jsonlite.simplifyVector = TRUE)
# Source internal files ---------------------------------------------------
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
shinyApp(ui = app_ui, server = app_server)
View(data_latest)
shinyApp(ui = app_ui, server = app_server)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(shiny,shinydashboard,shinydashboardPlus,
reactable,plotly,tidyverse,leaflet,
rnaturalearth,rnaturalearthdata,sf,
jsonlite,DBI,RSQLite,yaml)
options(jsonlite.simplifyVector = TRUE)
# Source internal files ---------------------------------------------------
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(shiny,shinydashboard,shinydashboardPlus,
reactable,plotly,tidyverse,leaflet,
rnaturalearth,rnaturalearthdata,sf,
jsonlite,DBI,RSQLite,yaml, arrow)
options(jsonlite.simplifyVector = TRUE)
# Source internal files ---------------------------------------------------
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
View(raw_data)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(
arrow,
tidyverse
)
knitr::opts_chunk$set(echo = TRUE)
raw_data1 <- read_parquet('meta_raw_join_clean.parquet')
View(raw_data1)
View(data_latest)
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(shiny,shinydashboard,shinydashboardPlus,
reactable,plotly,tidyverse,leaflet,
rnaturalearth,rnaturalearthdata,sf,
jsonlite,DBI,RSQLite,yaml, arrow)
options(jsonlite.simplifyVector = TRUE)
# Source internal files ---------------------------------------------------
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
shinyApp(ui = app_ui, server = app_server)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
View(raw_data)
View(result_data)
result_data <- raw_data_clean %>%
expand_split_rows() %>%
mutate(country_region = if_else(country_region == "Country required", NA_character_, country_region))
result_data <- raw_data_clean %>%
expand_split_rows() %>%
mutate(country_region = if_else(country_region == "Country required", NA_character_, country_region))
data_latest <- result_data
# write.csv(data_latest, file = 'data_20250715.csv', row.names = FALSE) # for data import in GPT
write_parquet(data_latest,'data/data_latest.parquet')
View(data_latest)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
source("shinyapp/mod_overview.R", local = TRUE)
source("shinyapp/mod_table.R",    local = TRUE)
source("shinyapp/mod_autoupdate.R",    local = TRUE)
source("shinyapp/mod_search.R",   local = TRUE)
source("shinyapp/mod_version_log.R",   local = TRUE)
source("shinyapp/mod_message_board.R",   local = TRUE)
source("shinyapp/app_ui.R",       local = TRUE)
source("shinyapp/app_server.R",   local = TRUE)
# Launch ------------------------------------------------------------------
shinyApp(ui = app_ui, server = app_server)
shinyApp(ui = app_ui, server = app_server)
shinyApp(ui = app_ui, server = app_server)
View(raw_data)
View(raw_data1)
